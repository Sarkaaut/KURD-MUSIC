# MIT License
#
# Copyright (c) 2023 AnonymousX1025
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import asyncio
import importlib
import os

from pyrogram import idle

from FallenMusic import (
    ASS_ID,
    ASS_NAME,
    ASS_USERNAME,
    BOT_ID,
    BOT_NAME,
    BOT_USERNAME,
    LOGGER,
    SUNAME,
    app,
    app2,
    pytgcalls,
)
from FallenMusic.Modules import ALL_MODULES


async def fallen_startup():
    LOGGER.info("[â€¢] Ø¨Ø§Ø±Ú©Ø±Ø¯Ù†ÛŒ Ù…Û†Ø¯ÛŒÙˆÙ„Û•Ú©Ø§Ù†...")
    for module in ALL_MODULES:
        importlib.import_module("FallenMusic.Modules." + module)
    LOGGER.info(f"[â€¢] Loaded {len(ALL_MODULES)} Modules.")

    LOGGER.info("[â€¢] Ù†ÙˆÛŽÚ©Ø±Ø¯Ù†Û•ÙˆÛ•ÛŒ Ø¨Û•Ú•ÛŽÙˆÛ•Ø¨Û•Ø±Ø§ÛŒÛ•ØªÛŒÛŒÛ•Ú©Ø§Ù†...")
    if "downloads" not in os.listdir():
        os.mkdir("downloads")
    if "cache" not in os.listdir():
        os.mkdir("cache")
    LOGGER.info("[â€¢] Ø¨Û•Ú•ÛŽÙˆÛ•Ø¨Û•Ø±Ø§ÛŒÛ•ØªÛŒÛŒÛ•Ú©Ø§Ù† Ù†ÙˆÛŽÚ©Ø±Ø§ÙˆÙ†Û•ØªÛ•ÙˆÛ•.")

    try:
        await app.send_message(
            SUNAME,
            f"âœ¯ Bot Music Kurd âœ¯\n\nð–¢µ Ø¦Ø§ÛŒØ¯ÛŒ : `{BOT_ID}`\nð–¢µ Ù†Ø§ÙˆÛ• Ú©Û• : {BOT_NAME}\nð–¢µ Ù†Ø§ÙˆÛŒ Ø¨Û•Ú©Ø§Ø±Ù‡ÛŽÙ†Û•Ø± : @{BOT_USERNAME}",
        )
    except:
        LOGGER.error(
            f"{BOT_NAME} Ø´Ú©Ø³ØªÛŒ Ù‡ÛŽÙ†Ø§ Ù„Û• Ù†Ø§Ø±Ø¯Ù†ÛŒ Ù†Ø§Ù…Û• Ù„Û• @{SUNAME}, ØªÚ©Ø§ÛŒÛ• Ø¨Ú•Û† & Ù¾Ø´Ú©Ù†ÛŒÙ† Ø¨Ú©Û•."
        )

    try:
        await app2.send_message(
            SUNAME,
            f"âœ¯ Bot Music Krud âœ¯\n\nð–¢µ Ø¦Ø§ÛŒØ¯ÛŒ : `{ASS_ID}`\nð–¢µ Ù†Ø§ÙˆÛ• Ú©Û• : {ASS_NAME}\nð–¢µ Ù†Ø§ÙˆÛŒ Ø¨Û•Ú©Ø§Ø±Ù‡ÛŽÙ†Û•Ø± : @{ASS_USERNAME}",
        )
    except:
        LOGGER.error(
            f"{ASS_NAME} Ø´Ú©Ø³ØªÛŒ Ù‡ÛŽÙ†Ø§ Ù„Û• Ù†Ø§Ø±Ø¯Ù†ÛŒ Ù†Ø§Ù…Û• Ù„Û• @{SUNAME}, ØªÚ©Ø§ÛŒÛ• Ø¨Ú•Û† & Ù¾Ø´Ú©Ù†ÛŒÙ† Ø¨Ú©Û•."
        )

    await app2.send_message(BOT_USERNAME, "/start")

    LOGGER.info(f"[â€¢] Ø¨Û†Øª Ø¯Û•Ø³ØªÛŒ Ù¾ÛŽÚ©Ø±Ø¯ ÙˆÛ•Ú© {BOT_NAME}.")
    LOGGER.info(f"[â€¢] ÛŒØ§Ø±ÛŒØ¯Û•Ø¯Û•Ø± ÙˆÛ•Ú© Ø¯Û•Ø³ØªÛŒ Ù¾ÛŽÚ©Ø±Ø¯ {ASS_NAME}.")

    LOGGER.info(
        "[â€¢] \x53\x74\x61\x72\x74\x69\x6e\x67\x20\x50\x79\x54\x67\x43\x61\x6c\x6c\x73\x20\x43\x6c\x69\x65\x6e\x74\x2e\x2e\x2e"
    )
    await pytgcalls.start()
    await idle()


if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(fallen_startup())
    LOGGER.error("Ø¨Û†ØªÛŒ Ù…Û†Ø³ÛŒÙ‚Ø§ÛŒ Ú©Û•ÙˆØªÙˆÙˆ ÙˆÛ•Ø³ØªØ§.")
